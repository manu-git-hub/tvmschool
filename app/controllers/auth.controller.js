const db = require('../models');
const config = require('../config/auth.config');
const User = db.user;
const Role = db.role;
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const mailConfig = require('../config/mail.config');

exports.signup = async (req, res) => {
  try {
    // Generate the user ID
    const lastUser = await User.findOne({
      order: [['createdAt', 'DESC']],
    });
    const newId = lastUser ? `000${parseInt(lastUser.id, 10) + 1}`.slice(-4) : '0001';

    // Generate a random password
    const autoGeneratedPassword = Math.random().toString(36).slice(-8); // 8-character password

    // Ensure the email is unique
    const existingUser = await User.findOne({ where: { email: req.body.email } });
    if (existingUser) {
      return res.status(400).send({ message: 'Email is already in use!' });
    }

    // Create the user
    const user = await User.create({
      id: newId,
      username: req.body.username,
      email: req.body.email,
      password: bcrypt.hashSync(autoGeneratedPassword, 8),
    });

    // Assign the default role
    const roles = req.body.roles || ['user'];
    const rolesData = await Role.findAll({ where: { name: roles } });
    await user.setRoles(rolesData);

    // Send email
    const transporter = nodemailer.createTransport(mailConfig);

    const mailOptions = {
      from: mailConfig.auth.user, // sender address
      to: req.body.email,         // receiver address
      subject: 'Your Account Credentials', // Subject
      text: `Hi ${req.body.username},\n\nYour account has been created successfully!\n\nYour User ID: ${newId}\nYour Password: ${autoGeneratedPassword}\n\nPlease log in.\n\nBest regards,\nTVM SCHOOL`, // Email content
    };

    transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        console.error('Error sending email:', err);
        return res.status(500).send({ message: 'User registered but email could not be sent.' });
      }
      console.log('Email sent:', info.response);
      res.send({
        message: 'User registered successfully! Email sent.',
        userId: user.id,
        autoGeneratedPassword, // Password in the response (optional)
      });
    });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};


exports.signin = async (req, res) => {
  try {
    // Find the user by userID
    const user = await User.findOne({ where: { id: req.body.userID } });

    if (!user) {
      return res.status(404).send({ message: 'User not found.' });
    }

    // Check if the password matches
    const passwordIsValid = bcrypt.compareSync(req.body.password, user.password);

    if (!passwordIsValid) {
      return res.status(401).send({
        message: 'Invalid Password!',
      });
    }

    // Generate a JWT token
    const token = jwt.sign({ id: user.id }, config.secret, {
      expiresIn: 86400, // 24 hours
    });

    // Store the token in the session
    req.session.token = token;

    // Send the response
    res.status(200).send({
      userID: user.id,
      username: user.username,
      email: user.email,
      token,
    });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};
